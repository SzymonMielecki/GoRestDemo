package cmd

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"time"

	"github.com/SzymonMielecki/air_qual/server/persistance"
	"github.com/spf13/cobra"
)

var (
	apiKey  string
	city    string
	state   string
	country string
)

type AutoGenerated struct {
	Status string `json:"status"`
	Data   struct {
		City     string `json:"city"`
		State    string `json:"state"`
		Country  string `json:"country"`
		Location struct {
			Type        string    `json:"type"`
			Coordinates []float64 `json:"coordinates"`
		} `json:"location"`
		Current struct {
			Pollution struct {
				Ts     time.Time `json:"ts"`
				Mainus string    `json:"mainus"`
				Maincn string    `json:"maincn"`
				Aqius  int       `json:"aqius"`
				Aqicn  int       `json:"aqicn"`
			} `json:"pollution"`
			Weather struct {
				Ts time.Time `json:"ts"`
				Ic string    `json:"ic"`
				Tp int       `json:"tp"`
				Pr int       `json:"pr"`
				Hu int       `json:"hu"`
				Ws float64   `json:"ws"`
				Wd int       `json:"wd"`
			} `json:"weather"`
		} `json:"current"`
	} `json:"data"`
}

var rootCmd = &cobra.Command{
	Use:   "air_qual",
	Short: "check air quality in your area",
	Long:  ``,
	Run: func(cmd *cobra.Command, args []string) {
		formatedUrl := fmt.Sprintf("http://api.airvisual.com/v2/city?city=%s&state=%s&country=%s&key=%s", city, state, country, apiKey)
		resp, err := http.Get(formatedUrl)
		if err != nil {
			fmt.Println("Error: ", err)
			return
		}
		defer resp.Body.Close()

		body, err := io.ReadAll(resp.Body)
		if err != nil {
			fmt.Println("Error: ", err)
			return
		}
		auto := AutoGenerated{}
		if err := json.Unmarshal(body, &auto); err != nil {
			fmt.Println("Error: ", err)
			return
		}
		port := os.Getenv("PORT")
		if port == "" {
			port = ":1323"
		}

		url_weather := fmt.Sprintf("http://localhost%s/weather", port)
		weather := persistance.Weather{
			Ic: auto.Data.Current.Weather.Ic,
			Tp: auto.Data.Current.Weather.Tp,
			Pr: auto.Data.Current.Weather.Pr,
			Hu: auto.Data.Current.Weather.Hu,
			Ws: auto.Data.Current.Weather.Ws,
			Wd: auto.Data.Current.Weather.Wd,
		}
		weatherJson, err := json.Marshal(weather)
		if err != nil {
			fmt.Println("Error: ", err)
			return
		}

		url_pollution := fmt.Sprintf("http://localhost%s/pollution", port)
		pollution := persistance.Pollution{
			Mainus: auto.Data.Current.Pollution.Mainus,
			Maincn: auto.Data.Current.Pollution.Maincn,
			Aqius:  auto.Data.Current.Pollution.Aqius,
			Aqicn:  auto.Data.Current.Pollution.Aqicn,
		}
		pollutionJson, err := json.Marshal(pollution)
		if err != nil {
			fmt.Println("Error: ", err)
			return
		}

		contentType := "application/json"
		_, err = http.Post(url_weather, contentType, bytes.NewBuffer(weatherJson))
		if err != nil {
			fmt.Println("Error: ", err)
			return
		}

		_, err = http.Post(url_pollution, contentType, bytes.NewBuffer(pollutionJson))
		if err != nil {
			fmt.Println("Error: ", err)
			return
		}
		fmt.Println("Data sent to server")
	},
}

func Connect() {
	if err := rootCmd.Execute(); err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
}

func init() {
	rootCmd.PersistentFlags().StringVarP(&city, "city", "c", "Warsaw", "City")
	rootCmd.PersistentFlags().StringVarP(&state, "state", "s", "Mazovia", "State")
	rootCmd.PersistentFlags().StringVarP(&country, "country", "t", "Poland", "Country")
	rootCmd.PersistentFlags().StringVarP(&apiKey, "apiKey", "k", "", "API key")

	rootCmd.MarkFlagRequired("apiKey")
}
